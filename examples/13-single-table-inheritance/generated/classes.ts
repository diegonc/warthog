// This file has been auto-generated by Warthog.  Do not update directly as it
// will be re-written.  If you need to change this file, update models or add
// new TypeGraphQL objects
// prettier-ignore
// @ts-ignore
import { DateResolver as Date } from 'graphql-scalars';
// prettier-ignore
// @ts-ignore
import { GraphQLID as ID } from 'graphql';
// prettier-ignore
// @ts-ignore
import { ArgsType, Field as TypeGraphQLField, Float, InputType as TypeGraphQLInputType, Int } from 'type-graphql';
// prettier-ignore
// @ts-ignore
import { registerEnumType, GraphQLISODateTime as DateTime } from "type-graphql";

// prettier-ignore
// @ts-ignore eslint-disable-next-line @typescript-eslint/no-var-requires
const { GraphQLJSONObject } = require('graphql-type-json');
// prettier-ignore
// @ts-ignore
import { BaseWhereInput, JsonObject, PaginationArgs, DateOnlyString, DateTimeString } from '../../../src';

// @ts-ignore
import { Party } from "../src/party.model";
// @ts-ignore
import { Group } from "../src/group.model";
// @ts-ignore
import { GroupParty } from "../src/group-party.model";
// @ts-ignore
import { Person } from "../src/person.model";

export enum PartyOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  commonName_ASC = "commonName_ASC",
  commonName_DESC = "commonName_DESC"
}

registerEnumType(PartyOrderByEnum, {
  name: "PartyOrderByInput"
});

@TypeGraphQLInputType()
export class PartyWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  commonName_eq?: string;

  @TypeGraphQLField({ nullable: true })
  commonName_contains?: string;

  @TypeGraphQLField({ nullable: true })
  commonName_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  commonName_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  commonName_in?: string[];
}

@TypeGraphQLInputType()
export class PartyWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PartyCreateInput {
  @TypeGraphQLField()
  commonName!: string;
}

@TypeGraphQLInputType()
export class PartyUpdateInput {
  @TypeGraphQLField({ nullable: true })
  commonName?: string;
}

@ArgsType()
export class PartyWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PartyWhereInput, { nullable: true })
  where?: PartyWhereInput;

  @TypeGraphQLField(() => PartyOrderByEnum, { nullable: true })
  orderBy?: PartyOrderByEnum;
}

@ArgsType()
export class PartyCreateManyArgs {
  @TypeGraphQLField(() => [PartyCreateInput])
  data!: PartyCreateInput[];
}

@ArgsType()
export class PartyUpdateArgs {
  @TypeGraphQLField() data!: PartyUpdateInput;
  @TypeGraphQLField() where!: PartyWhereUniqueInput;
}

export enum GroupOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  commonName_ASC = "commonName_ASC",
  commonName_DESC = "commonName_DESC",

  groupName_ASC = "groupName_ASC",
  groupName_DESC = "groupName_DESC"
}

registerEnumType(GroupOrderByEnum, {
  name: "GroupOrderByInput"
});

@TypeGraphQLInputType()
export class GroupWhereInput extends PartyWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  commonName_eq?: string;

  @TypeGraphQLField({ nullable: true })
  commonName_contains?: string;

  @TypeGraphQLField({ nullable: true })
  commonName_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  commonName_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  commonName_in?: string[];

  @TypeGraphQLField({ nullable: true })
  groupName_eq?: string;

  @TypeGraphQLField({ nullable: true })
  groupName_contains?: string;

  @TypeGraphQLField({ nullable: true })
  groupName_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  groupName_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  groupName_in?: string[];
}

@TypeGraphQLInputType()
export class GroupWhereUniqueInput extends PartyWhereUniqueInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id?: string;

  @TypeGraphQLField(() => String, { nullable: true })
  groupName?: string;
}

@TypeGraphQLInputType()
export class GroupCreateInput extends PartyCreateInput {
  @TypeGraphQLField()
  commonName!: string;

  @TypeGraphQLField()
  groupName!: string;
}

@TypeGraphQLInputType()
export class GroupUpdateInput extends PartyUpdateInput {
  @TypeGraphQLField({ nullable: true })
  commonName?: string;

  @TypeGraphQLField({ nullable: true })
  groupName?: string;
}

@ArgsType()
export class GroupWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => GroupWhereInput, { nullable: true })
  where?: GroupWhereInput;

  @TypeGraphQLField(() => GroupOrderByEnum, { nullable: true })
  orderBy?: GroupOrderByEnum;
}

@ArgsType()
export class GroupCreateManyArgs {
  @TypeGraphQLField(() => [GroupCreateInput])
  data!: GroupCreateInput[];
}

@ArgsType()
export class GroupUpdateArgs {
  @TypeGraphQLField() data!: GroupUpdateInput;
  @TypeGraphQLField() where!: GroupWhereUniqueInput;
}

export enum GroupPartyOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  groupId_ASC = "groupId_ASC",
  groupId_DESC = "groupId_DESC",

  partyId_ASC = "partyId_ASC",
  partyId_DESC = "partyId_DESC",

  dummyField_ASC = "dummyField_ASC",
  dummyField_DESC = "dummyField_DESC"
}

registerEnumType(GroupPartyOrderByEnum, {
  name: "GroupPartyOrderByInput"
});

@TypeGraphQLInputType()
export class GroupPartyWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  groupId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  groupId_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  partyId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  partyId_in?: string[];

  @TypeGraphQLField({ nullable: true })
  dummyField_eq?: string;

  @TypeGraphQLField({ nullable: true })
  dummyField_contains?: string;

  @TypeGraphQLField({ nullable: true })
  dummyField_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  dummyField_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  dummyField_in?: string[];
}

@TypeGraphQLInputType()
export class GroupPartyWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class GroupPartyCreateInput {
  @TypeGraphQLField(() => ID)
  groupId!: string;

  @TypeGraphQLField(() => ID)
  partyId!: string;

  @TypeGraphQLField({ nullable: true })
  dummyField?: string;
}

@TypeGraphQLInputType()
export class GroupPartyUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  groupId?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  partyId?: string;

  @TypeGraphQLField({ nullable: true })
  dummyField?: string;
}

@ArgsType()
export class GroupPartyWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => GroupPartyWhereInput, { nullable: true })
  where?: GroupPartyWhereInput;

  @TypeGraphQLField(() => GroupPartyOrderByEnum, { nullable: true })
  orderBy?: GroupPartyOrderByEnum;
}

@ArgsType()
export class GroupPartyCreateManyArgs {
  @TypeGraphQLField(() => [GroupPartyCreateInput])
  data!: GroupPartyCreateInput[];
}

@ArgsType()
export class GroupPartyUpdateArgs {
  @TypeGraphQLField() data!: GroupPartyUpdateInput;
  @TypeGraphQLField() where!: GroupPartyWhereUniqueInput;
}

export enum PersonOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  commonName_ASC = "commonName_ASC",
  commonName_DESC = "commonName_DESC",

  firstName_ASC = "firstName_ASC",
  firstName_DESC = "firstName_DESC",

  lastName_ASC = "lastName_ASC",
  lastName_DESC = "lastName_DESC",

  email_ASC = "email_ASC",
  email_DESC = "email_DESC",

  password_ASC = "password_ASC",
  password_DESC = "password_DESC"
}

registerEnumType(PersonOrderByEnum, {
  name: "PersonOrderByInput"
});

@TypeGraphQLInputType()
export class PersonWhereInput extends PartyWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  commonName_eq?: string;

  @TypeGraphQLField({ nullable: true })
  commonName_contains?: string;

  @TypeGraphQLField({ nullable: true })
  commonName_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  commonName_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  commonName_in?: string[];

  @TypeGraphQLField({ nullable: true })
  firstName_eq?: string;

  @TypeGraphQLField({ nullable: true })
  firstName_contains?: string;

  @TypeGraphQLField({ nullable: true })
  firstName_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  firstName_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  firstName_in?: string[];

  @TypeGraphQLField({ nullable: true })
  lastName_eq?: string;

  @TypeGraphQLField({ nullable: true })
  lastName_contains?: string;

  @TypeGraphQLField({ nullable: true })
  lastName_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  lastName_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  lastName_in?: string[];

  @TypeGraphQLField({ nullable: true })
  email_eq?: string;

  @TypeGraphQLField({ nullable: true })
  email_contains?: string;

  @TypeGraphQLField({ nullable: true })
  email_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  email_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  email_in?: string[];

  @TypeGraphQLField({ nullable: true })
  password_eq?: string;

  @TypeGraphQLField({ nullable: true })
  password_contains?: string;

  @TypeGraphQLField({ nullable: true })
  password_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  password_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  password_in?: string[];
}

@TypeGraphQLInputType()
export class PersonWhereUniqueInput extends PartyWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PersonCreateInput extends PartyCreateInput {
  @TypeGraphQLField()
  commonName!: string;

  @TypeGraphQLField()
  firstName!: string;

  @TypeGraphQLField()
  lastName!: string;

  @TypeGraphQLField({ nullable: true })
  email?: string;

  @TypeGraphQLField({ nullable: true })
  password?: string;
}

@TypeGraphQLInputType()
export class PersonUpdateInput extends PartyUpdateInput {
  @TypeGraphQLField({ nullable: true })
  commonName?: string;

  @TypeGraphQLField({ nullable: true })
  firstName?: string;

  @TypeGraphQLField({ nullable: true })
  lastName?: string;

  @TypeGraphQLField({ nullable: true })
  email?: string;

  @TypeGraphQLField({ nullable: true })
  password?: string;
}

@ArgsType()
export class PersonWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PersonWhereInput, { nullable: true })
  where?: PersonWhereInput;

  @TypeGraphQLField(() => PersonOrderByEnum, { nullable: true })
  orderBy?: PersonOrderByEnum;
}

@ArgsType()
export class PersonCreateManyArgs {
  @TypeGraphQLField(() => [PersonCreateInput])
  data!: PersonCreateInput[];
}

@ArgsType()
export class PersonUpdateArgs {
  @TypeGraphQLField() data!: PersonUpdateInput;
  @TypeGraphQLField() where!: PersonWhereUniqueInput;
}
